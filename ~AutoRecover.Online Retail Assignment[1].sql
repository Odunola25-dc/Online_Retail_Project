
-- 1. Customer Segmentation by Purchase Frequency:


WITH CleanedData AS (
    SELECT
        CustomerID,
        InvoiceNo,
        Quantity,
        UnitPrice,
        ROUND(Quantity * UnitPrice, 2) AS Revenue
    FROM ['Online Retail$']
    WHERE
        CustomerID IS NOT NULL
        AND Quantity > 0
),
PurchaseFrequency AS (
    SELECT
        CustomerID,
        COUNT(DISTINCT InvoiceNo) AS PurchaseCount
    FROM CleanedData
    GROUP BY CustomerID
),
SegmentedCustomers AS (
    SELECT
        pf.CustomerID,
        pf.PurchaseCount,
        CASE
            WHEN pf.PurchaseCount = 1 THEN 'One-time'
            WHEN pf.PurchaseCount BETWEEN 2 AND 5 THEN 'Repeat'
            ELSE 'High-frequency'
        END AS Segment,
        SUM(cd.Revenue) AS TotalRevenue
    FROM PurchaseFrequency pf
    JOIN CleanedData cd ON pf.CustomerID = cd.CustomerID
    GROUP BY pf.CustomerID, pf.PurchaseCount
),
FinalReport AS (
    SELECT
        Segment,
        COUNT(DISTINCT CustomerID) AS NumCustomers,
        ROUND(SUM(TotalRevenue), 2) AS SegmentRevenue,
        ROUND(AVG(TotalRevenue), 2) AS AvgRevenuePerCustomer,
        ROUND(MIN(TotalRevenue), 2) AS MinRevenue,
        ROUND(MAX(TotalRevenue), 2) AS MaxRevenue,
        SUM(PurchaseCount) AS TotalPurchases
    FROM SegmentedCustomers
    GROUP BY Segment
)
SELECT
    Segment,
    NumCustomers,
    SegmentRevenue,
    AvgRevenuePerCustomer,
    MinRevenue,
    MaxRevenue,
    TotalPurchases
FROM FinalReport
ORDER BY SegmentRevenue DESC;

 

 --2. Top 10 Most Purchased Products: 
-- Identify the top 10 most purchased products based on total quantity sold

SELECT TOP 10
    Description,
    SUM(Quantity) AS TotalQuantitySold,
    COUNT(DISTINCT InvoiceNo) AS NumTransactions,
    ROUND(AVG(UnitPrice), 2) AS AvgUnitPrice,
    ROUND(SUM(Quantity * UnitPrice), 2) AS TotalRevenue,
    COUNT(DISTINCT CustomerID) AS NumCustomers
FROM ['Online Retail$']
WHERE
    CustomerID IS NOT NULL
    AND Quantity > 0
    AND LEN(Description) > 0
GROUP BY Description
ORDER BY TotalQuantitySold DESC;


--3. Revenue Analysis by Country: 
-- Calculate total sales revenue for each country, identifying the top 5 countries that 
-- contribute the most to overall sales. 

SELECT TOP 5
    Country,
    ROUND(SUM(Quantity * UnitPrice), 2) AS TotalRevenue,
    COUNT(DISTINCT CustomerID) AS NumCustomers,
    COUNT(DISTINCT InvoiceNo) AS NumInvoices,
    ROUND(AVG(UnitPrice), 2) AS AvgUnitPrice
FROM ['Online Retail$']
WHERE
    CustomerID IS NOT NULL
    AND Quantity > 0
GROUP BY Country
ORDER BY TotalRevenue DESC;


-- 4. Monthly Sales Performance: 
-- Analyze monthly sales data to identify seasonal trends and key periods of high or low sales.
	SELECT 
    YEAR(InvoiceDate) AS SalesYear,
    MONTH(InvoiceDate) AS SalesMonth,
    DATENAME(MONTH, InvoiceDate) AS MonthName,
    COUNT(DISTINCT InvoiceNo) AS TotalOrders,
    CAST(SUM(Quantity) AS DECIMAL(18,2)) AS TotalUnitsSold,
    CAST(SUM(Quantity * UnitPrice) AS DECIMAL(18,2)) AS TotalRevenue,
    COUNT(DISTINCT CustomerID) AS UniqueCustomers
FROM 
    ['Online Retail$']
WHERE 
    InvoiceNo IS NOT NULL
    AND Quantity > 0
    AND UnitPrice > 0
GROUP BY 
    YEAR(InvoiceDate), MONTH(InvoiceDate), DATENAME(MONTH, InvoiceDate)
ORDER BY 
    SalesYear, SalesMonth;




-- Question 5 Customer Lifetime Value (CLV) Analysis
--Calculate the Customer Lifetime Value (CLV) by analyzing the total revenue 
--generated by repeat customers over the dataset's time span
SELECT 
    CustomerID,
    COUNT(DISTINCT InvoiceNo) AS TotalOrders,
    SUM(Quantity) AS TotalUnits,
    CAST(SUM(Quantity * UnitPrice) AS DECIMAL(18,2)) AS TotalRevenue,
    CAST(DATEDIFF(DAY, MIN(InvoiceDate), MAX(InvoiceDate)) AS DECIMAL(18,2)) AS DaysActive
FROM 
    ['Online Retail$']
WHERE 
    CustomerID IS NOT NULL
GROUP BY 
    CustomerID
HAVING 
    COUNT(DISTINCT InvoiceNo) > 1 -- Only repeat customers
ORDER BY 
    TotalRevenue DESC;

-- 6. Product Performance Analysis by Category (if available): 
-- Analyze which product categories (if categories can be derived from descriptions 
--or stock codes) generate the most sales revenue. 

SELECT 
    LEFT(Description, CHARINDEX(' ', Description + ' ') - 1) AS Category,
    COUNT(DISTINCT StockCode) AS UniqueProducts,
    SUM(Quantity) AS TotalUnitsSold,
    CAST(SUM(Quantity * UnitPrice) AS DECIMAL(18,2)) AS TotalRevenue,
    COUNT(DISTINCT InvoiceNo) AS TotalOrders
FROM 
    onli
WHERE 
    InvoiceNo IS NOT NULL
    AND Quantity > 0
    AND UnitPrice > 0
    AND Description IS NOT NULL
GROUP BY 
    LEFT(Description, CHARINDEX(' ', Description + ' ') - 1)
ORDER BY 
    TotalRevenue DESC;









